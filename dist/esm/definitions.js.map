{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAsEA,MAAM,OAAO,WAAW;IAKtB,YAAY,CAAkB,EAAE,CAAkB;QAChD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAChB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAED,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,6DAAQ,CAAA;IACR,uDAAK,CAAA;IACL,+DAAS,CAAA;AACX,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAED;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,eAyCX;AAzCD,WAAY,eAAe;IACzB,8BAA8B;IAC9B,oDAAiC,CAAA;IACjC,uBAAuB;IACvB,6CAA0B,CAAA;IAC1B,sBAAsB;IACtB,4CAAyB,CAAA;IACzB,+BAA+B;IAC/B,qDAAkC,CAAA;IAClC,0CAA0C;IAC1C,6DAA0C,CAAA;IAC1C,6CAA6C;IAC7C,gEAA6C,CAAA;IAC7C,+CAA+C;IAC/C,kEAA+C,CAAA;IAC/C,kDAAkD;IAClD,qEAAkD,CAAA;IAClD,oCAAoC;IACpC,wDAAqC,CAAA;IACrC,uCAAuC;IACvC,2DAAwC,CAAA;IACxC,qCAAqC;IACrC,wDAAqC,CAAA;IACrC,uCAAuC;IACvC,2DAAwC,CAAA;IACxC,0CAA0C;IAC1C,8DAA2C,CAAA;IAC3C,2CAA2C;IAC3C,6DAA0C,CAAA;IAC1C,0CAA0C;IAC1C,4DAAyC,CAAA;IACzC,sDAAsD;IACtD,wEAAqD,CAAA;IACrD,yDAAyD;IACzD,2EAAwD,CAAA;IACxD,iCAAiC;IACjC,uDAAoC,CAAA;IACpC,uBAAuB;IACvB,8CAA2B,CAAA;IAC3B,8BAA8B;IAC9B,qDAAkC,CAAA;AACpC,CAAC,EAzCW,eAAe,KAAf,eAAe,QAyC1B;AAED,MAAM,CAAN,IAAY,YA+BX;AA/BD,WAAY,YAAY;IACtB,gCAAgB,CAAA;IAChB,4BAAY,CAAA;IACZ,6BAAa,CAAA;IACb,6BAAa,CAAA;IACb,4BAAY,CAAA;IACZ,8BAAc,CAAA;IACd,8BAAc,CAAA;IACd,+BAAe,CAAA;IACf,8BAAc,CAAA;IACd,6BAAa,CAAA;IACb,+BAAe,CAAA;IACf,gCAAgB,CAAA;IAChB,8BAAc,CAAA;IACd,+BAAe,CAAA;IACf,+BAAe,CAAA;IACf,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,8BAAc,CAAA;IACd,gCAAgB,CAAA;IAChB,4BAAY,CAAA;IACZ,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,+BAAe,CAAA;IACf,8BAAc,CAAA;IACd,6BAAa,CAAA;IACb,gCAAgB,CAAA;IAChB,8BAAc,CAAA;IACd,8BAAc,CAAA;IACd,8BAAc,CAAA;IACd,8BAAc,CAAA;AAChB,CAAC,EA/BW,YAAY,KAAZ,YAAY,QA+BvB","sourcesContent":["import { PluginListenerHandle } from \"@capacitor/core\";\n\nexport interface IDnowPlugin {\n  /**\n   * \n   * @param { IdnowOptions } options \n   * \n   *  SDK initialization functions so we can set properly language and future properties.\n   * \n   */\n  initialize(options: IdnowOptions): Promise<void>;\n\n  /**\n  * SDK SartIdent override\n  * \n  * \n  * @param { IdnowIdentOptions } options \n  * \n  *  Contains a unique Ident-ID is created for each identification process and is specific to you. \n  *  Your Ident-ID is composed of 8 letters with the format ABC-DEFGH.\n  *  If you have problems with your Ident-ID, please contact the partner that supplied this to you.\n  * \n  */\n  sartIdent(options: IdnowIdentOptions): Promise<void>;\n\n  addListener(\n    eventName: 'finished',\n    listenerFunc: (event: IDnowResult) => void,\n  ): Promise<PluginListenerHandle>;\n\n  addListener(\n    eventName: 'error',\n    listenerFunc: (event: IDnowResult) => void,\n  ): Promise<PluginListenerHandle>;\n\n  addListener(\n    eventName: 'cancelled',\n    listenerFunc: (event: IDnowResult) => void,\n  ): Promise<PluginListenerHandle>;\n\n  /**\n   * Check camera permission.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  \n  /**\n   * Request camera permission.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  requestPermissions(): Promise<PermissionStatus>;\n\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface IdnowOptions {\n  language: LanguageCode;\n}\n\n// Start Ident Options\nexport interface IdnowIdentOptions {\n  id: string; // Ident Id equivalent.\n}\n\nexport class IDnowResult {\n\n  private type!: IdNowResultType;\n  private code!: IdNowResultCode;\n\n  constructor(t: IdNowResultType, c: IdNowResultCode) {\n    this.type = t;\n    this.code = c;\n  }\n\n  getResultType(): IdNowResultType {\n    return this.type;\n  }\n\n  getStatusCode(): string {\n    return this.code;\n  }\n}\n\nexport enum IdNowResultType {\n  FINISHED,\n  ERROR,\n  CANCELLED\n}\n\n/**\n *  For E102 it is recommended to create another ident, and restart the process with the new ident code.\n *  For E103 it is recommended to show a screen to the user with the message that they have submitted all info needed and that they should wait for the final result.\n *  For E170 it is recommended to notify the user that the ident process timed out or was started on a different device and ask them to try again.\n *  E180 is to alert the host app if the context has been lost (OS restarted/killed SDK process).\n *  For all other error codes it is recommended to show a generic error for the user and ask them to try again by restarting the process.\n */\nexport enum IdNowResultCode {\n  // Ident code syntax incorrect\n  IdentCodeSyntaxIncorrect = \"E100\",\n  // Ident code not found\n  IdentCodeNotFound = \"E101\",\n  // Ident code expired \n  IdentCodeExpired = \"E102\",\n  // Ident code already completed\n  IdentCodeAlreadyCompleted = \"E103\",\n  // Get ident info failed; invalid response\n  GetIdentInfoFailedInvalidResponse = \"E110\",\n  // Get ident info failed; server reachability\n  GetIdentInfoFailedServerReachability = \"E111\",\n  // Get ident resources failed; invalid response\n  GetIdentResourcesFailedInvalidResponse = \"E130\",\n  // Get ident resources failed; server reachability\n  GetIdentResourcesFailedServerReachability = \"E131\",\n  // Get name failed; invalid response\n  GetNameFailedInvalidResponse = \"E140\",\n  // Get name failed; server reachability\n  GetNameFailedServerReachability = \"E141\",\n  // Get name failed; full name missing\n  GetNameFailedFullNameMissing = \"E142\",\n  // Start ident failed; invalid response\n  StartIdentFailedInvalidResponse = \"E150\",\n  // Start ident failed; server reachability\n  StartIdentFailedServerReachability = \"E151\",\n  // Start ident failed; missing session key \n  StartIdentFailedMissingSessionKey = \"E152\",\n  // Start ident failed; wrong ident method \n  StartIdentFailedWrongIdentMethod = \"E153\",\n  // Get Emirates NFC resources failed; invalid response\n  GetEmiratesNFCResourcesFailedInvalidResponse = \"E160\",\n  // Get Emirates NFC resources failed; server reachability\n  GetEmiratesNFCResourcesFailedServerReachability = \"E161\",\n  // Socket connection force closed\n  SocketConnectionForceClosed = \"E170\",\n  // Process force closed\n  ProcessForceClosed = \"E171\",\n  // Missing application context\n  MissingApplicationContext = \"E180\"\n}\n\nexport enum LanguageCode {\n  Bulgarian = \"bg\",\n  Czech = \"cs\",\n  Danish = \"da\",\n  German = \"de\",\n  Greek = \"el\",\n  English = \"en\",\n  Spanish = \"es\",\n  Estonian = \"et\",\n  Finnish = \"fi\",\n  French = \"fr\",\n  Croatian = \"hr\",\n  Hungarian = \"hu\",\n  Italian = \"it\",\n  Japanese = \"ja\",\n  Georgian = \"ka\",\n  Korean = \"ko\",\n  Lithuanian = \"lt\",\n  Latvian = \"lv\",\n  Norwegian = \"nb\",\n  Dutch = \"nl\",\n  Polish = \"pl\",\n  Portuguese = \"pt\",\n  Romanian = \"ro\",\n  Russian = \"ru\",\n  Slovak = \"sk\",\n  Slovenian = \"sl\",\n  Serbian = \"sr\",\n  Swedish = \"sv\",\n  Turkish = \"tr\",\n  Chinese = \"zh\"\n}"]}